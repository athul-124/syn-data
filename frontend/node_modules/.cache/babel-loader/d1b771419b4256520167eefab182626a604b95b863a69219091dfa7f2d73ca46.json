{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst API_BASE = 'http://localhost:8000'; // Make sure this points to your FastAPI backend\n\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [],\n  // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  // UI state\n  loading: false,\n  error: null,\n  // Actions\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  // File upload\n  uploadFile: async file => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      console.log('Uploading to:', `${API_BASE}/upload`); // Add this log\n\n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      set(state => ({\n        uploadedFile: response.data,\n        uploadedFiles: [...(state.uploadedFiles || []), response.data],\n        loading: false\n      }));\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Upload error:', error);\n      set({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Upload failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      set({\n        previewData: response.data,\n        loading: false\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Preview failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Start generation task\n  startGeneration: async params => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      const newTask = response.data;\n      set(state => ({\n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false\n      }));\n      return newTask;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Generation failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Poll task status\n  pollTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      set(state => {\n        var _state$currentTask;\n        return {\n          generationTasks: state.generationTasks.map(task => task.id === taskId ? updatedTask : task),\n          currentTask: ((_state$currentTask = state.currentTask) === null || _state$currentTask === void 0 ? void 0 : _state$currentTask.id) === taskId ? updatedTask : state.currentTask\n        };\n      });\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({\n        generationTasks: response.data\n      });\n      return response.data;\n    } catch (error) {\n      set({\n        error: 'Failed to fetch tasks'\n      });\n    }\n  },\n  // Add these functions to your store\n  checkTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => task.task_id === taskId ? updatedTask : task)\n      }));\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","API_BASE","useStore","set","get","user","isAuthenticated","uploadedFile","uploadedFiles","previewData","generationTasks","currentTask","loading","error","setLoading","setError","uploadFile","file","formData","FormData","append","console","log","response","post","headers","state","data","_error$response","_error$response$data","detail","message","generatePreview","fileId","rows","file_id","n_rows","_error$response2","_error$response2$data","startGeneration","params","newTask","_error$response3","_error$response3$data","pollTaskStatus","taskId","updatedTask","_state$currentTask","map","task","id","fetchTasks","checkTaskStatus","task_id"],"sources":["E:/ATHUL KRISHNA M B/Project/SynData plus/syn-data/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst API_BASE = 'http://localhost:8000'; // Make sure this points to your FastAPI backend\n\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  \n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [], // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  \n  // UI state\n  loading: false,\n  error: null,\n  \n  // Actions\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  \n  // File upload\n  uploadFile: async (file) => {\n    set({ loading: true, error: null });\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      console.log('Uploading to:', `${API_BASE}/upload`); // Add this log\n      \n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      \n      set(state => ({ \n        uploadedFile: response.data,\n        uploadedFiles: [...(state.uploadedFiles || []), response.data],\n        loading: false \n      }));\n      \n      return response.data;\n    } catch (error) {\n      console.error('Upload error:', error);\n      set({ \n        error: error.response?.data?.detail || error.message || 'Upload failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      \n      set({ \n        previewData: response.data,\n        loading: false \n      });\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Preview failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Start generation task\n  startGeneration: async (params) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      \n      const newTask = response.data;\n      set(state => ({ \n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false \n      }));\n      \n      return newTask;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Generation failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Poll task status\n  pollTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        generationTasks: state.generationTasks.map(task => \n          task.id === taskId ? updatedTask : task\n        ),\n        currentTask: state.currentTask?.id === taskId ? updatedTask : state.currentTask\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  \n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({ generationTasks: response.data });\n      return response.data;\n    } catch (error) {\n      set({ error: 'Failed to fetch tasks' });\n    }\n  },\n  \n  // Add these functions to your store\n  checkTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => \n          task.task_id === taskId ? updatedTask : task\n        )\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  }\n}));\n\nexport default useStore;\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}