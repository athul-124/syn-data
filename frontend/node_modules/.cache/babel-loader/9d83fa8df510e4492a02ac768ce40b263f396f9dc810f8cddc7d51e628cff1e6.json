{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [],\n  // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  // UI state\n  loading: false,\n  error: null,\n  // Actions\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  // File upload\n  uploadFile: async file => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      set({\n        uploadedFile: response.data,\n        loading: false\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Upload failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      set({\n        previewData: response.data,\n        loading: false\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Preview failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Start generation task\n  startGeneration: async params => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      const newTask = response.data;\n      set(state => ({\n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false\n      }));\n      return newTask;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Generation failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Poll task status\n  pollTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      set(state => {\n        var _state$currentTask;\n        return {\n          generationTasks: state.generationTasks.map(task => task.id === taskId ? updatedTask : task),\n          currentTask: ((_state$currentTask = state.currentTask) === null || _state$currentTask === void 0 ? void 0 : _state$currentTask.id) === taskId ? updatedTask : state.currentTask\n        };\n      });\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({\n        generationTasks: response.data\n      });\n      return response.data;\n    } catch (error) {\n      set({\n        error: 'Failed to fetch tasks'\n      });\n    }\n  },\n  // Add these functions to your store\n  checkTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => task.task_id === taskId ? updatedTask : task)\n      }));\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  },\n  // Add this function to fetch uploaded files\n  fetchUploadedFiles: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/files`);\n      set({\n        uploadedFiles: response.data\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch uploaded files:', error);\n      set({\n        uploadedFiles: []\n      });\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","API_BASE","process","env","REACT_APP_API_URL","useStore","set","get","user","isAuthenticated","uploadedFile","uploadedFiles","previewData","generationTasks","currentTask","loading","error","setLoading","setError","uploadFile","file","formData","FormData","append","response","post","headers","data","_error$response","_error$response$data","detail","generatePreview","fileId","rows","file_id","n_rows","_error$response2","_error$response2$data","startGeneration","params","newTask","state","_error$response3","_error$response3$data","pollTaskStatus","taskId","updatedTask","_state$currentTask","map","task","id","console","fetchTasks","checkTaskStatus","task_id","fetchUploadedFiles"],"sources":["E:/ATHUL KRISHNA M B/Project/SynData plus/syn-data/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  \n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [], // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  \n  // UI state\n  loading: false,\n  error: null,\n  \n  // Actions\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  \n  // File upload\n  uploadFile: async (file) => {\n    set({ loading: true, error: null });\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      \n      set({ \n        uploadedFile: response.data,\n        loading: false \n      });\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Upload failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      \n      set({ \n        previewData: response.data,\n        loading: false \n      });\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Preview failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Start generation task\n  startGeneration: async (params) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      \n      const newTask = response.data;\n      set(state => ({ \n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false \n      }));\n      \n      return newTask;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Generation failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Poll task status\n  pollTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        generationTasks: state.generationTasks.map(task => \n          task.id === taskId ? updatedTask : task\n        ),\n        currentTask: state.currentTask?.id === taskId ? updatedTask : state.currentTask\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  \n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({ generationTasks: response.data });\n      return response.data;\n    } catch (error) {\n      set({ error: 'Failed to fetch tasks' });\n    }\n  },\n  \n  // Add these functions to your store\n  checkTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => \n          task.task_id === taskId ? updatedTask : task\n        )\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  },\n  \n  // Add this function to fetch uploaded files\n  fetchUploadedFiles: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/files`);\n      set({ uploadedFiles: response.data });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch uploaded files:', error);\n      set({ uploadedFiles: [] });\n    }\n  }\n}));\n\nexport default useStore;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}