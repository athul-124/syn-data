{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst API_BASE = 'http://localhost:8000'; // Make sure this points to your FastAPI backend\n\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [],\n  // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  // UI state\n  loading: false,\n  error: null,\n  // Actions\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  // File upload\n  uploadFile: async file => {\n    set({\n      loading: true,\n      error: null\n    });\n\n    // Temporary mock for testing\n    console.log('Mock upload for file:', file.name);\n\n    // Simulate upload delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const mockResponse = {\n      success: true,\n      filename: file.name,\n      size: file.size,\n      file_id: 'mock_' + Date.now()\n    };\n    set(state => ({\n      uploadedFile: mockResponse,\n      uploadedFiles: [...(state.uploadedFiles || []), mockResponse],\n      loading: false\n    }));\n    return mockResponse;\n\n    // TODO: Replace with real upload once backend is working\n    /*\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        timeout: 10000\n      });\n      \n      set(state => ({ \n        uploadedFile: response.data,\n        uploadedFiles: [...(state.uploadedFiles || []), response.data],\n        loading: false \n      }));\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: 'Upload failed: ' + error.message,\n        loading: false \n      });\n      throw error;\n    }\n    */\n  },\n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      set({\n        previewData: response.data,\n        loading: false\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Preview failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Start generation task\n  startGeneration: async params => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      const newTask = response.data;\n      set(state => ({\n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false\n      }));\n      return newTask;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Generation failed',\n        loading: false\n      });\n      throw error;\n    }\n  },\n  // Poll task status\n  pollTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      set(state => {\n        var _state$currentTask;\n        return {\n          generationTasks: state.generationTasks.map(task => task.id === taskId ? updatedTask : task),\n          currentTask: ((_state$currentTask = state.currentTask) === null || _state$currentTask === void 0 ? void 0 : _state$currentTask.id) === taskId ? updatedTask : state.currentTask\n        };\n      });\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({\n        generationTasks: response.data\n      });\n      return response.data;\n    } catch (error) {\n      set({\n        error: 'Failed to fetch tasks'\n      });\n    }\n  },\n  // Add these functions to your store\n  checkTaskStatus: async taskId => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => task.task_id === taskId ? updatedTask : task)\n      }));\n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","axios","API_BASE","useStore","set","get","user","isAuthenticated","uploadedFile","uploadedFiles","previewData","generationTasks","currentTask","loading","error","setLoading","setError","uploadFile","file","console","log","name","Promise","resolve","setTimeout","mockResponse","success","filename","size","file_id","Date","now","state","generatePreview","fileId","rows","response","post","n_rows","data","_error$response","_error$response$data","detail","startGeneration","params","newTask","_error$response2","_error$response2$data","pollTaskStatus","taskId","updatedTask","_state$currentTask","map","task","id","fetchTasks","checkTaskStatus","task_id"],"sources":["E:/ATHUL KRISHNA M B/Project/SynData plus/syn-data/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst API_BASE = 'http://localhost:8000'; // Make sure this points to your FastAPI backend\n\nconst useStore = create((set, get) => ({\n  // Auth state\n  user: null,\n  isAuthenticated: false,\n  \n  // Data state\n  uploadedFile: null,\n  uploadedFiles: [], // Add this array\n  previewData: null,\n  generationTasks: [],\n  currentTask: null,\n  \n  // UI state\n  loading: false,\n  error: null,\n  \n  // Actions\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  \n  // File upload\n  uploadFile: async (file) => {\n    set({ loading: true, error: null });\n    \n    // Temporary mock for testing\n    console.log('Mock upload for file:', file.name);\n    \n    // Simulate upload delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const mockResponse = {\n      success: true,\n      filename: file.name,\n      size: file.size,\n      file_id: 'mock_' + Date.now()\n    };\n    \n    set(state => ({ \n      uploadedFile: mockResponse,\n      uploadedFiles: [...(state.uploadedFiles || []), mockResponse],\n      loading: false \n    }));\n    \n    return mockResponse;\n    \n    // TODO: Replace with real upload once backend is working\n    /*\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE}/upload`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        timeout: 10000\n      });\n      \n      set(state => ({ \n        uploadedFile: response.data,\n        uploadedFiles: [...(state.uploadedFiles || []), response.data],\n        loading: false \n      }));\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: 'Upload failed: ' + error.message,\n        loading: false \n      });\n      throw error;\n    }\n    */\n  },\n  \n  // Generate preview\n  generatePreview: async (fileId, rows = 10) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/preview`, {\n        file_id: fileId,\n        n_rows: rows\n      });\n      \n      set({ \n        previewData: response.data,\n        loading: false \n      });\n      \n      return response.data;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Preview failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Start generation task\n  startGeneration: async (params) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.post(`${API_BASE}/generate-async`, params);\n      \n      const newTask = response.data;\n      set(state => ({ \n        generationTasks: [...state.generationTasks, newTask],\n        currentTask: newTask,\n        loading: false \n      }));\n      \n      return newTask;\n    } catch (error) {\n      set({ \n        error: error.response?.data?.detail || 'Generation failed',\n        loading: false \n      });\n      throw error;\n    }\n  },\n  \n  // Poll task status\n  pollTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks/${taskId}/status`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        generationTasks: state.generationTasks.map(task => \n          task.id === taskId ? updatedTask : task\n        ),\n        currentTask: state.currentTask?.id === taskId ? updatedTask : state.currentTask\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to poll task status:', error);\n    }\n  },\n  \n  // Get all tasks\n  fetchTasks: async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/tasks`);\n      set({ generationTasks: response.data });\n      return response.data;\n    } catch (error) {\n      set({ error: 'Failed to fetch tasks' });\n    }\n  },\n  \n  // Add these functions to your store\n  checkTaskStatus: async (taskId) => {\n    try {\n      const response = await axios.get(`${API_BASE}/task-status/${taskId}`);\n      const updatedTask = response.data;\n      \n      set(state => ({\n        currentTask: updatedTask,\n        generationTasks: state.generationTasks.map(task => \n          task.task_id === taskId ? updatedTask : task\n        )\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Failed to check task status:', error);\n    }\n  }\n}));\n\nexport default useStore;\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}